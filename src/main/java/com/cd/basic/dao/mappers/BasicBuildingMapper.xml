<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cd.basic.dao.BasicBuildingDao">
    <!-- BasicBuilding的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_BasicBuilding_Map" type="com.cd.basic.pojo.domain.BasicBuilding">
        <id column="ID" property="id" />
        <result column="BUILDING_LAYER" property="buildingLayer" />
        <result column="CAMPUS_FK_CODE" property="campusFkCode" />
        <result column="DEL_STATUS" property="delStatus" />
        <result column="CREATE_TIME" property="createTime" />
        <result column="UPDATE_TIME" property="updateTime" />
        <result column="FK_CODE" property="fkCode" />
        <result column="BUILDING_NAME" property="buildingName" />
        <result column="BUILDING_TYPE" property="buildingType" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:basic_building的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="basic_building_Column">
        basic_building.ID as ID
        ,basic_building.BUILDING_LAYER as BUILDING_LAYER
        ,basic_building.CAMPUS_FK_CODE as CAMPUS_FK_CODE
        ,basic_building.DEL_STATUS as DEL_STATUS
        ,basic_building.CREATE_TIME as CREATE_TIME
        ,basic_building.UPDATE_TIME as UPDATE_TIME
        ,basic_building.FK_CODE as FK_CODE
        ,basic_building.BUILDING_NAME as BUILDING_NAME
        ,basic_building.BUILDING_TYPE as BUILDING_TYPE
    </sql>

    <!--获得类名为:BasicBuilding对应的数据库表的数据总行数 -->
    <select id="getBasicBuildingRowCount" parameterType="com.cd.common.Assist" resultType="java.lang.Long">
        select count(ID) from basic_building
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:BasicBuilding对应数据库中表的数据集合 -->
    <select id="selectBasicBuilding" parameterType="com.cd.common.Assist"  resultMap="result_BasicBuilding_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="basic_building_Column" /> 
            </otherwise>
        </choose>
        from basic_building
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT ID as primary_key FROM basic_building
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=basic_building.ID
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个BasicBuilding对象,以参数BasicBuilding对象中不为空的属性作为条件进行查询-->
    <select id="selectBasicBuildingByObj" parameterType="com.cd.basic.pojo.domain.BasicBuilding" resultMap="result_BasicBuilding_Map">
        select 
            <include refid="basic_building_Column" /> 
        from basic_building
        <where>
            <if test="buildingType != null "> and basic_building.BUILDING_TYPE = #{buildingType}</if>
            <if test="buildingName != null "> and basic_building.BUILDING_NAME = #{buildingName}</if>
            <if test="fkCode != null "> and basic_building.FK_CODE = #{fkCode}</if>
            <if test="updateTime != null "> and basic_building.UPDATE_TIME = #{updateTime}</if>
            <if test="createTime != null "> and basic_building.CREATE_TIME = #{createTime}</if>
            <if test="delStatus != null "> and basic_building.DEL_STATUS = #{delStatus}</if>
            <if test="campusFkCode != null "> and basic_building.CAMPUS_FK_CODE = #{campusFkCode}</if>
            <if test="buildingLayer != null "> and basic_building.BUILDING_LAYER = #{buildingLayer}</if>
            <if test="id != null "> and basic_building.ID = #{id}</if>
        </where>
    </select> 

    <!-- 通过BasicBuilding的id获得对应数据库中表的数据对象-->
    <select id="selectBasicBuildingById" parameterType="java.lang.Long" resultMap="result_BasicBuilding_Map">
        select 
            <include refid="basic_building_Column" /> 
        from basic_building
        where basic_building.ID = #{id}
    </select> 

    <!-- 将BasicBuilding插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertBasicBuilding" parameterType="com.cd.basic.pojo.domain.BasicBuilding">
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID() AS id
        </selectKey>
        insert into basic_building(ID,BUILDING_LAYER,CAMPUS_FK_CODE,DEL_STATUS,CREATE_TIME,UPDATE_TIME,FK_CODE,BUILDING_NAME,BUILDING_TYPE) 
        values(#{id},#{buildingLayer},#{campusFkCode},#{delStatus},#{createTime},#{updateTime},#{fkCode},#{buildingName},#{buildingType})
    </insert>

    <!-- 将BasicBuilding中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyBasicBuilding" parameterType="com.cd.basic.pojo.domain.BasicBuilding">
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID() AS id
        </selectKey>
        insert into basic_building
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">ID,</if>
            <if test="buildingLayer != null">BUILDING_LAYER,</if>
            <if test="campusFkCode != null">CAMPUS_FK_CODE,</if>
            <if test="delStatus != null">DEL_STATUS,</if>
            <if test="createTime != null">CREATE_TIME,</if>
            <if test="updateTime != null">UPDATE_TIME,</if>
            <if test="fkCode != null">FK_CODE,</if>
            <if test="buildingName != null">BUILDING_NAME,</if>
            <if test="buildingType != null">BUILDING_TYPE,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="buildingLayer != null"> #{buildingLayer},</if>
            <if test="campusFkCode != null"> #{campusFkCode},</if>
            <if test="delStatus != null"> #{delStatus},</if>
            <if test="createTime != null"> #{createTime},</if>
            <if test="updateTime != null"> #{updateTime},</if>
            <if test="fkCode != null"> #{fkCode},</if>
            <if test="buildingName != null"> #{buildingName},</if>
            <if test="buildingType != null"> #{buildingType},</if>
        </trim>
    </insert>

    <!-- 将BasicBuilding批量插入到对应数据库的表中-->
    <insert id="insertBasicBuildingByBatch" parameterType="ArrayList">
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID() AS id
        </selectKey>
        insert into basic_building(ID,BUILDING_LAYER,CAMPUS_FK_CODE,DEL_STATUS,CREATE_TIME,UPDATE_TIME,FK_CODE,BUILDING_NAME,BUILDING_TYPE) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.buildingLayer},#{item.campusFkCode},#{item.delStatus},#{item.createTime},#{item.updateTime},#{item.fkCode},#{item.buildingName},#{item.buildingType})
        </foreach>
    </insert>

    <!-- 通过BasicBuilding的id将数据库表中对应的数据删除-->
    <delete id="deleteBasicBuildingById" parameterType="java.lang.Long">
        delete from basic_building
        where ID = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将BasicBuilding对应的数据库表的数据删除-->
    <delete id="deleteBasicBuilding" parameterType="com.cd.common.Assist">
        delete from basic_building
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过BasicBuilding的id将BasicBuilding的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateBasicBuildingById" parameterType="com.cd.basic.pojo.domain.BasicBuilding">
        update basic_building set
            BUILDING_LAYER=#{buildingLayer}
            ,CAMPUS_FK_CODE=#{campusFkCode}
            ,DEL_STATUS=#{delStatus}
            ,CREATE_TIME=#{createTime}
            ,UPDATE_TIME=#{updateTime}
            ,FK_CODE=#{fkCode}
            ,BUILDING_NAME=#{buildingName}
            ,BUILDING_TYPE=#{buildingType}
        where ID=#{id}
    </update>

    <!-- 通过BasicBuilding的id将BasicBuilding中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyBasicBuildingById" parameterType="com.cd.basic.pojo.domain.BasicBuilding">
        update basic_building
        <set>
            <if test="buildingLayer != null">
                BUILDING_LAYER=#{buildingLayer},
            </if>
            <if test="campusFkCode != null">
                CAMPUS_FK_CODE=#{campusFkCode},
            </if>
            <if test="delStatus != null">
                DEL_STATUS=#{delStatus},
            </if>
            <if test="createTime != null">
                CREATE_TIME=#{createTime},
            </if>
            <if test="updateTime != null">
                UPDATE_TIME=#{updateTime},
            </if>
            <if test="fkCode != null">
                FK_CODE=#{fkCode},
            </if>
            <if test="buildingName != null">
                BUILDING_NAME=#{buildingName},
            </if>
            <if test="buildingType != null">
                BUILDING_TYPE=#{buildingType},
            </if>
        </set>
        where ID=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将BasicBuilding中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateBasicBuilding" parameterType="map">
        update basic_building
        <set>
                ID=#{enti.id},
                BUILDING_LAYER=#{enti.buildingLayer},
                CAMPUS_FK_CODE=#{enti.campusFkCode},
                DEL_STATUS=#{enti.delStatus},
                CREATE_TIME=#{enti.createTime},
                UPDATE_TIME=#{enti.updateTime},
                FK_CODE=#{enti.fkCode},
                BUILDING_NAME=#{enti.buildingName},
                BUILDING_TYPE=#{enti.buildingType},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将BasicBuilding中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyBasicBuilding" parameterType="map">
        update basic_building
        <set>
            <if test="enti.id != null">
                ID=#{enti.id},
            </if>
            <if test="enti.buildingLayer != null">
                BUILDING_LAYER=#{enti.buildingLayer},
            </if>
            <if test="enti.campusFkCode != null">
                CAMPUS_FK_CODE=#{enti.campusFkCode},
            </if>
            <if test="enti.delStatus != null">
                DEL_STATUS=#{enti.delStatus},
            </if>
            <if test="enti.createTime != null">
                CREATE_TIME=#{enti.createTime},
            </if>
            <if test="enti.updateTime != null">
                UPDATE_TIME=#{enti.updateTime},
            </if>
            <if test="enti.fkCode != null">
                FK_CODE=#{enti.fkCode},
            </if>
            <if test="enti.buildingName != null">
                BUILDING_NAME=#{enti.buildingName},
            </if>
            <if test="enti.buildingType != null">
                BUILDING_TYPE=#{enti.buildingType},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>